/*
 * $Id: $
 * 
 * 
 * This license is set out in https://github.com/Broadcom/Broadcom-Compute-Connectivity-Software-robo2-xsdk/master/Legal/LICENSE file.
 *
 * $Copyright: (c) 2020 Broadcom Inc.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 * 
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 */

#ifndef __BCM_CUSTOM_H__
#define __BCM_CUSTOM_H__

#include <bcm/types.h>
#include <bcm/policer.h>
#include <bcm/port.h>
#include <bcm/mcast.h>
#include <bcm/mirror.h>

#if !defined(BCM_CUSTOM_ARGS_MAX)
#define BCM_CUSTOM_ARGS_MAX     256        
#endif

#define BCM_CUSTOM_SET          1          
#define BCM_CUSTOM_GET          2          

/* bcm_custom_cb_t */
typedef int (*bcm_custom_cb_t)(
    int unit, 
    bcm_port_t port, 
    int setget, 
    int type, 
    int length, 
    uint32 *args, 
    int *actual_length, 
    void *user_data);

#ifndef BCM_HIDE_DISPATCHABLE

/* Register a custom callback function. */
extern int bcm_custom_register(
    int unit, 
    bcm_custom_cb_t func, 
    void *user_data);

/* Register a custom callback function. */
extern int bcm_custom_unregister(
    int unit);

/* Invoke a custom handler for a port. */
extern int bcm_custom_port_set(
    int unit, 
    bcm_port_t port, 
    int type, 
    int len, 
    uint32 *args);

/* Invoke a custom handler for a port. */
extern int bcm_custom_port_get(
    int unit, 
    bcm_port_t port, 
    int type, 
    int max_len, 
    uint32 *args, 
    int *actual_len);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Meter Profile Id */
typedef uint32 bcm_custom_meter_profile_t;

/* Meter Id */
typedef uint32 bcm_custom_meterid_t;

#define BCM_CUSTOM_FIELD_ID_INVALID (0xffffffff) /* Invalid field id */

/* Field processor action flags */
#define BCM_CUSTOM_FIELD_ACTION_OVERRIDE    (0x00000001) /* Override lower
                                                          priority matches (do
                                                          not merge them into
                                                          final actions) */
#define BCM_CUSTOM_FIELD_ACTION_UPDATE_DP   (0x00000002) /*  Change Drop
                                                          Precedence */
#define BCM_CUSTOM_FIELD_ACTION_DLF         (0x00000004) /* Ignore drop_ulf and
                                                          drop_mlf */
#define BCM_CUSTOM_FIELD_ACTION_LOOP_ENABLE (0x00000008) /* Allow packet to
                                                          loopback to source */
#define BCM_CUSTOM_FIELD_ACTION_IN_POLICY_UPDATE_PRI (0x00000010) /* In policy: change
                                                          Traffic Class priority */
#define BCM_CUSTOM_FIELD_ACTION_OUT_POLICY_UPDATE_PRI (0x00000020) /* Out policy: change
                                                          Traffic Class priority */
#define BCM_CUSTOM_FIELD_ACTION_IN_POLICY_LEARN_DISABLE (0x00000040) /* In policy: disable
                                                          learning for this
                                                          packet */
#define BCM_CUSTOM_FIELD_ACTION_OUT_POLICY_LEARN_DISABLE (0x00000080) /* Out policy: disable
                                                          learning for this
                                                          packet */

/* Field action trap ids */
#define BCM_CUSTOM_FIELD_ACTION_DROP_ALL    (1)        /* Drop all packets */
#define BCM_CUSTOM_FIELD_ACTION_TRAP_TO_CPU (2)        /* Trap packet to CPU */
#define BCM_CUSTOM_FIELD_ACTION_TRAP_TO_CPU_AND_FORWARD (3)        /* Trap packet to CPU and
                                                          forward */

/* 
 * FIELD Attribute number - Defines the maximum number of valid
 * attributes for different key types. Used for allocation of memory for
 * attr_selector field passed to cbx_cfp_attr_selector_init function for
 * prefilling list of qualifiers that are valid for a key type
 */
#define BCM_CUSTOM_FIELD_L2_ETHERNET_ATTR_MAX (16)       /* L2 Ethernet key */
#define BCM_CUSTOM_FIELD_IPV4_ATTR_MAX      (21)       /* IPv4 key */
#define BCM_CUSTOM_FIELD_IPV6_ATTR_MAX      (23)       /* IPv6 key with addr as
                                                          2 64 bits attributes */
#define BCM_CUSTOM_FIELD_L2_IPV4_ATTR_MAX   (23)       /* L2 and IPv4 Key */
#define BCM_CUSTOM_FIELD_UDF_ATTR_MAX       (18)       /* UDF Key */

/* Vlan Tag Status values for FieldRuleAttrOuterVlanTagStatus */
#define BCM_CUSTOM_FIELD_ATTR_OUTER_VLAN_NOT_PRESENT (0x0)      /* Outer Vlan not present */
#define BCM_CUSTOM_FIELD_ATTR_OUTER_VLAN_PRIORITY_TAGGED (0x1)      /* Outer Vlan priority
                                                          tagged */
#define BCM_CUSTOM_FIELD_ATTR_OUTER_VLAN_SINGLE_TAG (0x2)      /* Outer Vlan single tag */

/* Vlan Tag Status values for FieldRuleAttrInnerVlanTagStatus */
#define BCM_CUSTOM_FIELD_ATTR_INNER_VLAN_NOT_PRESENT (0x0)      /* Inner Vlan not present */
#define BCM_CUSTOM_FIELD_ATTR_INNER_VLAN_PRIORITY_TAGGED (0x1)      /* Inner Vlan priority
                                                          tagged */
#define BCM_CUSTOM_FIELD_ATTR_INNER_VLAN_SINGLE_TAG (0x2)      /* Inner Vlan single tag */

#define BCM_CUSTOM_FIELD_ATTR_INNER_VLAN_PRESENT (0x1)      /* Inner Vlan present */

#define BCM_CUSTOM_FIELD_ATTR_MIM_TAG_PRESENT (0x1)      /* MIM tag present */

#define BCM_CUSTOM_FIELD_ATTR_E_TAG_PRESENT (0x1)      /* E tag present */

#define BCM_CUSTOM_FIELD_ATTR_MPLS_TAG_PRESENT (0x1)      /* MPLS tag present */

#define BCM_CUSTOM_FIELD_ATTR_PPP_HEADER_PRESENT (0x1)      /* PPP Header present */

#define BCM_CUSTOM_FIELD_ATTR_ETHERTYPE_LLC_SSAP_DDAP (0x0)      /* Ether type LLC SSAP
                                                          DDAP */

#define BCM_CUSTOM_FIELD_ATTR_ETHERTYPE_DIX (0x1)      /* Ether type DIX */

/* Field rule attribute for L3 type */
#define BCM_CUSTOM_FIELD_L3_TYPE_RAW        (0x0)      /* L3 type Raw */
#define BCM_CUSTOM_FIELD_L3_TYPE_LLC        (0x1)      /* LLC */
#define BCM_CUSTOM_FIELD_L3_TYPE_IPV4       (0x2)      /* IPV4 */
#define BCM_CUSTOM_FIELD_L3_TYPE_IPV6       (0x3)      /* IPV6 */
#define BCM_CUSTOM_FIELD_L3_TYPE_UC_MPLS    (0x4)      /* Unicast MPLS */
#define BCM_CUSTOM_FIELD_L3_TYPE_MC_MPLS    (0x5)      /* Multicast MPLS */
#define BCM_CUSTOM_FIELD_L3_TYPE_PTP        (0x6)      /* PTP */
#define BCM_CUSTOM_FIELD_L3_TYPE_ARP        (0x7)      /* ARP */

/* Field rule attribute for L4 type */
#define BCM_CUSTOM_FIELD_L4_TYPE_UNKNOWN    (0x0)      /* Unkwown */
#define BCM_CUSTOM_FIELD_L4_TYPE_TCP        (0x1)      /* TCP */
#define BCM_CUSTOM_FIELD_L4_TYPE_UDP        (0x2)      /* UDP */
#define BCM_CUSTOM_FIELD_L4_TYPE_ICMP       (0x3)      /* ICMP */
#define BCM_CUSTOM_FIELD_L4_TYPE_IGMP       (0x4)      /* IGMP */

/* Field rule attribute for L3 TTL type */
#define BCM_CUSTOM_FIELD_L3_TTL_ZERO    (0x0)      /* Zero */
#define BCM_CUSTOM_FIELD_L3_TTL_ONE     (0x1)      /* One */
#define BCM_CUSTOM_FIELD_L3_TTL_OTHER   (0x2)      /* Other */
#define BCM_CUSTOM_FIELD_L3_TTL_255     (0x3)      /* 255 */

/* Field rule attribute for L3 Fragment summary */
#define BCM_CUSTOM_FIELD_L3_FRAG_MIDDLE (0x0)      /* Middle */
#define BCM_CUSTOM_FIELD_L3_FRAG_LAST   (0x1)      /* Last */
#define BCM_CUSTOM_FIELD_L3_FRAG_FIRST  (0x2)      /* First */
#define BCM_CUSTOM_FIELD_L3_FRAG_NONE   (0x3)      /* None */

/* Field rule attribute for TCP control bit */
#define BCM_CUSTOM_FIELD_TCP_CONTROL_FIN    (0x0)      /* Fin */
#define BCM_CUSTOM_FIELD_TCP_CONTROL_SYN    (0x1)      /* Syn */
#define BCM_CUSTOM_FIELD_TCP_CONTROL_RST    (0x2)      /* Rst */
#define BCM_CUSTOM_FIELD_TCP_CONTROL_PSH    (0x3)      /* Psh */
#define BCM_CUSTOM_FIELD_TCP_CONTROL_ACK    (0x4)      /* Ack */
#define BCM_CUSTOM_FIELD_TCP_CONTROL_URG    (0x5)      /* Urg */

/* bcm_custom_field_id_t */
typedef uint32 bcm_custom_field_id_t;

/* Field processor stage */
typedef enum bcm_custom_field_stage_e {
    bcmCustomFieldStageIngress = 0, /* Ingress Stage */
    bcmCustomFieldStageEgress = 1   /* Egress Stage */
} bcm_custom_field_stage_t;

/* Field Key type */
typedef enum bcm_custom_field_key_type_e {
    bcmFieldKeyL2EthernetACL = 0,   /* L2 Ethernet ACL */
    bcmFieldKeyIPv4ACL = 1,         /* IPv4 ACL */
    bcmFieldKeyIPv6ACL = 2,         /* IPV6 ACL */
    bcmFieldKeyL2IPv4ACL = 3,       /* L2 / IPv4 ACL */
    bcmFieldKeyUDFACL = 4           /* UDF ACL */
} bcm_custom_field_key_type_t;

/* Field Count Mode enumerations */
typedef enum bcm_custom_field_count_mode_e {
    bcmFieldCountPacketsBytes = 0,      /* Count packets and bytes */
    bcmFieldCountPacketsByProfile = 1   /* Count packets in and out of profile */
} bcm_custom_field_count_mode_t;

/* Field Forward Mode */
typedef enum bcm_custom_field_forward_mode_e {
    bcmFieldForwardNoChange = 0,    /* Do not change forwarding */
    bcmFieldForwardLoopback = 1,    /* Forward looping back to source port */
    bcmFieldForwardUnicast = 2,     /* Forward to Unicast destination */
    bcmFieldForwardMulticast = 3,   /* Forward to Multicast Group */
    bcmFieldForwardFrom = 4,        /* Forward overriding source port */
    bcmFieldForwardDrop = 5,        /* Drop packet */
    bcmFieldForwardOverrideDrop = 6 /* Override any previous drop decision */
} bcm_custom_field_forward_mode_t;

/* Field Attribute */
typedef enum bcm_custom_field_rule_attribute_e {
    bcmFieldRuleAttrSourcePort = 0,     /* Source port                        F0 */
    bcmFieldRuleAttrIncomingTrafficClass = 1, /* L2 Status -ingress traffic class   F0 */
    bcmFieldRuleAttrOuterVlanTagStatus = 2, /* L2 Status - S tag status           F0 */
    bcmFieldRuleAttrInnerVlanTagStatus = 3, /* L2 Status - C tag status           F0 */
    bcmFieldRuleAttrMimTagStatus = 4,   /* L2 Status - MiM tag status         F0 */
    bcmFieldRuleAttrETagStatus = 5,     /* L2 Status-Port Extender Tag status F0 */
    bcmFieldRuleAttrEtherTypeStatus = 6, /* L2 Status -Ether Type DIX/SAP-SNAP F0 */
    bcmFieldRuleAttrMplsStatus = 7,     /* L2 Status - MPLS present/not       F0 */
    bcmFieldRuleAttrPppStatus = 8,      /* L2 Status - PPP present/not        F0 */
    bcmFieldRuleAttrL3Type = 9,         /* L2 Status - L3 -type               F0 */
    bcmFieldRuleAttrRangeResult = 10,   /* Range result - 1 bit for each range
                                           check hit F1 */
    bcmFieldRuleAttrDestMac = 11,       /* Destination MAC          F4 */
    bcmFieldRuleAttrSrcMac = 12,        /* Source MAC               F5 */
    bcmFieldRuleAttrOuterVlanId = 13,   /* VLAN id from outer C/S tag   F6 */
    bcmFieldRuleAttrInnerVlanId = 14,   /* Inner Vlan ID            F7 */
    bcmFieldRuleAttrEtherType = 15,     /* EtherType/DSAP/SSAP      F8 */
    bcmFieldRuleAttrL4Type = 16,        /* L3 Status bits - L3 Payload        
                                           F3 */
    bcmFieldRuleAttrL3TtlSummary = 17,  /* L3 Status bits - L3 TTL            
                                           F3 */
    bcmFieldRuleAttrL3FragSummary = 18, /* L3 Status bits - IP Fragment
                                           summaryF3 */
    bcmFieldRuleAttrSrcIp = 19,         /* IPv4 Source IP           F9 */
    bcmFieldRuleAttrDestIp = 20,        /* IPv4 Destination IP      F10 */
    bcmFieldRuleAttrDscp = 21,          /* IPv4/V6 DSCP/TOS         F13 */
    bcmFieldRuleAttrL4SrcPort = 22,     /* TCP/UDP source port      F16 */
    bcmFieldRuleAttrL4DestPort = 23,    /* TCP/UDP destination port F16 */
    bcmFieldRuleAttrIcmpCode = 24,      /* ICMP code type           F16 */
    bcmFieldRuleAttrIgmpType = 25,      /* IGMP type                F16 */
    bcmFieldRuleAttrTcpControl = 26,    /* TCP control flags        F17 */
    bcmFieldRuleAttrSrcIp6 = 27,        /* IPv6 Source IP -128bits  F9 + F11 */
    bcmFieldRuleAttrSrcIp6High = 28,    /* IPv6 Source IP MS:64bits F9 */
    bcmFieldRuleAttrSrcIp6Low = 29,     /* IPv6 Source IP LS:64bits F11 */
    bcmFieldRuleAttrDestIp6 = 30,       /* IPv6 Destination IP -128bits  F10 +
                                           F12 */
    bcmFieldRuleAttrDestIp6High = 31,   /* IPv6 Destination IP - MS 64 bits F10 */
    bcmFieldRuleAttrDestIp6Low = 32,    /* IPv6 Destination IP - LS 64 bits F12 */
    bcmFieldRuleAttrUDF0 = 33,          /* UDF0 - F24 - 64 bits starting from
                                           the end of SMAC */
    bcmFieldRuleAttrUDF1 = 35,          /* UDF1 - F25 - 64 bits from the end of
                                           UDF0 */
    bcmFieldRuleAttrUDF2 = 35,          /* UDF2 - F26 - 32 bits from the end of
                                           UDF1 */
    bcmFieldRuleAttrUDF3 = 36,          /* UDF3 - F27 - 32 bits from the end of
                                           UDF2+16 */
    bcmFieldRuleAttrUDF4 = 37,          /* UDF4 - F28 - 16 bits from the end of
                                           UDF3 */
    bcmFieldRuleAttrUDF5 = 38,          /* UDF5 - F29 - 16 bits from the end of
                                           UDF4 */
    bcmFieldRuleAttrUDF6 = 39,          /* UDF6 - F30 - 16 bits from the end of
                                           UDF5 */
    bcmFieldRuleAttrUDF7 = 40,          /* UDF7 - F31 - 16 bits from the end of
                                           UDF6 */
    bcmFieldRuleAttrMax = 41            /* Last value - not to be used */
} bcm_custom_field_rule_attribute_t;

/* 
 * Field L3/L4 packet type - Type of the packet to decide which to be
 * used for rule creation
 */
typedef enum bcm_custom_field_l3_l4_pkt_type_e {
    bcmFieldL3L4PktTypeTcp = 0,     /* TCP */
    bcmFieldL3L4PktTypeUdp = 1,     /* UDP */
    bcmFieldL3L4PktTypeIcmp = 2,    /* ICMP */
    bcmFieldL3L4PktTypeIgmp = 3     /* IGMP */
} bcm_custom_field_l3_l4_pkt_type_t;

/* Trap group enum (last 16 entries in MTGT) */
typedef enum bcm_custom_trap_group_e {
    bcmTrapGroupNone = 0,       /* None */
    bcmTrapGroupTrap2CP = 1,    /* Trap to CPU */
    bcmTrapGroupTrap2Casc = 2   /* Trap to cascade port */
} bcm_custom_trap_group_t;

/* Information about a field processor entry */
typedef struct bcm_custom_field_params_s {
    bcm_custom_field_stage_t stage; /* Stage - Ingress/Egress */
} bcm_custom_field_params_t;

/* Field Common action structure */
typedef struct bcm_custom_field_common_action_s {
    bcm_custom_meterid_t meterid;       /* Meter Identifier */
    int dp;                             /* Drop Precedence */
    bcm_custom_field_count_mode_t count_mode; /* Counter mode */
} bcm_custom_field_common_action_t;

/* Field Policy based action structure */
typedef struct bcm_custom_field_policy_action_s {
    bcm_custom_field_forward_mode_t forward_mode; /* Change forwarding */
    bcm_gport_t ucastid;                /* Fwd mode - Unicast interface */
    bcm_mcast_addr_t *mcast_addr;       /* Fwd mode - Multicast Identifier */
    bcm_gport_t sourceid;               /* Fwd mode - Source Port */
    int pri;                            /* Traffic Class - priority */
    bcm_custom_trap_group_t trap_group; /* Trap ID */
    bcm_mirror_destination_t *mirror_dest; /* Mirror Identifier */
} bcm_custom_field_policy_action_t;

/* Field action structure */
typedef struct bcm_custom_field_action_s {
    uint32 flags;                       /* Flags:  FIELD_ACTION_XX */
    bcm_custom_field_common_action_t common_action; /* Common Actions */
    bcm_custom_field_policy_action_t in_policy_action; /* In policy actions */
    bcm_custom_field_policy_action_t out_policy_action; /* Out of policy actions */
} bcm_custom_field_action_t;

/* Field attribute selector structure */
typedef struct bcm_custom_field_rule_attr_selector_s {
    bcm_custom_field_rule_attribute_t attr; /* Attribute name */
    uint8 attr_len;                     /* Length of the attribute value in
                                           bytes */
    uint8 *attr_val;                    /* Value of the attribute */
    uint8 *attr_mask;                   /* Mask */
} bcm_custom_field_rule_attr_selector_t;

/* Field Rule structure */
typedef struct bcm_custom_field_rule_s {
    bcm_custom_field_key_type_t key_type; /* L2/IPv4/IPv6/L2-IPv4/UDF */
    uint32 num_attributes;              /* Number of rule attributes */
    bcm_custom_field_rule_attr_selector_t *attr_selector; /* Array of rule attributes */
} bcm_custom_field_rule_t;

#ifndef BCM_HIDE_DISPATCHABLE

/* Initialize Field Action object */
extern int bcm_custom_field_action_t_init(
    int unit, 
    bcm_custom_field_action_t *action);

/* Field processor initialization */
extern int bcm_custom_field_init(
    int unit, 
    bcm_custom_field_params_t *field_params, 
    bcm_custom_field_id_t *field_id);

/* Detach a field previously initialized by field_init() */
extern int bcm_custom_field_detach(
    int unit, 
    bcm_custom_field_id_t field_id);

/* 
 * Initialize Field Rule object - Prefill attribute array in the Rule
 * with initialized values and masks
 */
extern int bcm_custom_field_rule_t_init(
    int unit, 
    bcm_custom_field_l3_l4_pkt_type_t pkt_type, 
    bcm_custom_field_rule_t *rule);

/* Field Rule set - This routine is used to set a Field rule */
extern int bcm_custom_field_rule_set(
    int unit, 
    bcm_custom_field_id_t *field_id, 
    bcm_custom_field_rule_t *rule, 
    uint32 index);

/* Field Rule clear - This routine is used to clear a Field rule */
extern int bcm_custom_field_rule_clear(
    int unit, 
    bcm_custom_field_id_t *field_id, 
    uint32 index);

/* Field Action set - This routine is used to set a Field action */
extern int bcm_custom_field_action_set(
    int unit, 
    bcm_custom_field_id_t *field_id, 
    bcm_custom_field_action_t *action, 
    uint32 index);

/* Field Action clear - This routine is used to clear a Field action */
extern int bcm_custom_field_action_clear(
    int unit, 
    bcm_custom_field_id_t *field_id, 
    uint32 index);

/* Field Rule dump - This routine is used to dump a Field rule */
extern int bcm_custom_field_rule_dump(
    int unit, 
    bcm_custom_field_id_t *field_id, 
    uint32 index);

/* Field Action dump - This routine is used to dump a Field action */
extern int bcm_custom_field_action_dump(
    int unit, 
    bcm_custom_field_id_t *field_id, 
    uint32 index);

/* Field Stat Multiget -  Get statistics of a field rule */
extern int bcm_custom_field_stat_multi_get(
    int unit, 
    bcm_custom_field_id_t *field_id, 
    uint32 rule_id, 
    int nstat, 
    bcm_field_stat_t *stat_arr, 
    uint64 *value_arr);

/* Field Stat Multiset - Set 32 bit statistics of a field rule */
extern int bcm_custom_field_stat_multi_set(
    int unit, 
    bcm_custom_field_id_t *field_id, 
    uint32 rule_id, 
    int nstat, 
    bcm_field_stat_t *stat_arr, 
    uint64 *value_arr);

/* Field Stat Multiget32 -  Get 32 bit statistics of a field rule */
extern int bcm_custom_field_stat_multi_get32(
    int unit, 
    bcm_custom_field_id_t *field_id, 
    uint32 rule_id, 
    int nstat, 
    bcm_field_stat_t *stat_arr, 
    uint32 *value_arr);

/* Field Stat Multiset32 - Set 32 bit statistics of a field rule */
extern int bcm_custom_field_stat_multi_set32(
    int unit, 
    bcm_custom_field_id_t *field_id, 
    uint32 rule_id, 
    int nstat, 
    bcm_field_stat_t *stat_arr, 
    uint32 *value_arr);

#endif /* BCM_HIDE_DISPATCHABLE */

#define BCM_CUSTOM_METER_INVALID    (0xffffffff) 

#define BCM_CUSTOM_METER_MAX    (128)      

/* Meter Type */
typedef enum bcm_custom_meter_type_e {
    bcmCustomMeterBufferManager = 0,    /* BMU Meters */
    bcmCustomMeterTrafficType = 1,      /* PP Meters */
    bcmCustomMeterTrapGroup = 2,        /* PQM Meters */
    bcmCustomMeterCFP = 3               /* CFP Meters */
} bcm_custom_meter_type_t;

/* Meter Modes */
typedef enum bcm_custom_meter_mode_e {
    bcmCustomMeterModeSrTCM = 0,        /* RFC2697 */
    bcmCustomMeterModeTrTCM = 1,        /* RFC2698 */
    bcmCustomMeterModeMEF = 2,          /* RFC4115 */
    bcmCustomMeterModeMEFBw = 3,        /* MEF Bandwidth Profile algorithm */
    bcmCustomMeterModeCoupledMEFBw = 4  /* MEF Bandwidth Profile with coupling */
} bcm_custom_meter_mode_t;

/* Meter Type Flags */
#define BCM_CUSTOM_METER_TYPE_NORMAL    (0x00000001) 
#define BCM_CUSTOM_METER_COLOR_BLIND    (0x00000002) 
#define BCM_CUSTOM_METER_DROP_RED       (0x00000004) 
#define BCM_CUSTOM_METER_SHAPING        (0x00000008) 
#define BCM_CUSTOM_METER_MODE_PACKETS   (0x00000010) 

typedef struct bcm_custom_meter_profile_params_s {
    uint32 flags;                   /* Flags:  CUSTOM_METER_XX */
    bcm_custom_meter_type_t type;   /* Policer type */
    bcm_custom_meter_mode_t mode;   /* Policer mode */
    uint32 ckbits_sec;              /* Committed rate in kbps or packets per
                                       second */
    uint32 ckbits_burst;            /* Committed burst size in kbits or number
                                       of packets */
    uint32 pkbits_sec;              /* Peak rate in kbps or packets per second */
    uint32 pkbits_burst;            /* Peak burst size in kbits or number of
                                       packets */
} bcm_custom_meter_profile_params_t;

/* Traffic Types */
typedef enum bcm_custom_traffic_type_e {
    bcmCustomTrafficTypeDLF = 0,        /* Broadcast packets */
    bcmCustomTrafficTypeUnicast = 1,    /* Unicast packets */
    bcmCustomTrafficTypeMulticast = 2,  /* Multicast packets */
    bcmCustomTrafficTypeBroadcast = 3   /* Broadcast packets */
} bcm_custom_traffic_type_t;

/* Traffic Class */
typedef struct bcm_custom_traffic_class_s {
    int int_pri;    /* Internal Priority */
    int int_dp;     /* Internal Drop Precedence */
} bcm_custom_traffic_class_t;

typedef struct bcm_custom_meter_params_s {
    bcm_gport_t portid;                 /* Port Identifier */
    bcm_custom_traffic_type_t traffic_type; /* Traffic Type */
    bcm_custom_traffic_class_t tc;      /* Traffic Class */
    int trap_group_index;               /* Trap Group Index */
} bcm_custom_meter_params_t;

typedef struct bcm_custom_meter_pm_counter_s {
    uint64 packet;  /* Packet counter */
    uint64 byte;    /* Byte counter */
} bcm_custom_meter_pm_counter_t;

/* Meter Performance monitor counters */
typedef struct bcm_custom_meter_pm_params_s {
    bcm_custom_meter_pm_counter_t custom_meter_pm_green; /* Frames which arrive with DP=0 */
    bcm_custom_meter_pm_counter_t custom_meter_pm_yellow; /* Frames which arrive with DP=1 */
    bcm_custom_meter_pm_counter_t custom_meter_pm_red; /* Frames which arrive with DP=2 */
    bcm_custom_meter_pm_counter_t custom_meter_pm_reserved; /* Frames which arrive with DP=3 */
    bcm_custom_meter_pm_counter_t custom_meter_pm_g2y; /* Frame which arrive with DP=0 and
                                           meter marks frame as DP=1 */
    bcm_custom_meter_pm_counter_t custom_meter_pm_y2r; /* Frame which arrive with DP=1 and
                                           meter marks frame as DP=2 */
    bcm_custom_meter_pm_counter_t custom_meter_pm_g2r; /* Frame which arrive with DP=0 and
                                           meter marks frame as DP=2 */
    bcm_custom_meter_pm_counter_t custom_meter_pm_y2g; /* Frame which arrive with DP=1 and
                                           meter marks frame as DP=0 (only color
                                           blind mode) */
    bcm_custom_meter_pm_counter_t custom_meter_pm_r2g; /* Frame which arrive with DP=2 and
                                           meter marks frame as DP=0 (only color
                                           blind mode) */
    bcm_custom_meter_pm_counter_t custom_meter_pm_r2y; /* Frame which arrive with DP=2 and
                                           meter marks frame as DP=1 (only color
                                           blind mode) */
    bcm_custom_meter_pm_counter_t custom_meter_pm_g2d; /* Frame which arrive with DP=0 and
                                           meter marks frame as DP=3 */
    bcm_custom_meter_pm_counter_t custom_meter_pm_y2d; /* Frame which arrive with DP=1 and
                                           meter marks frame as DP=3 */
    bcm_custom_meter_pm_counter_t custom_meter_pm_r2d; /* Frame which arrive with DP=2 and
                                           meter marks frame as DP=3 */
} bcm_custom_meter_pm_params_t;

#ifndef BCM_HIDE_DISPATCHABLE

/* This routine is used to create a meter profile */
extern int bcm_custom_meter_profile_create(
    int unit, 
    bcm_custom_meter_profile_params_t *profile_params, 
    bcm_custom_meter_profile_t *profile_id);

/* 
 * Destroy meter profile previously created by
 * custom_meter_profile_create()
 */
extern int bcm_custom_meter_profile_destroy(
    int unit, 
    bcm_custom_meter_profile_t profile_id);

/* This routine is used to get a meter profile */
extern int bcm_custom_meter_profile_get(
    int unit, 
    bcm_custom_meter_profile_t profile_id, 
    bcm_custom_meter_profile_params_t *profile_params);

/* This routine is used to set a meter profile */
extern int bcm_custom_meter_profile_set(
    int unit, 
    bcm_custom_meter_profile_t profile_id, 
    bcm_custom_meter_profile_params_t *profile_params);

/* This routine is used to create a meter */
extern int bcm_custom_meter_create(
    int unit, 
    bcm_custom_meter_profile_t profile_id, 
    bcm_custom_meter_params_t *meter_params, 
    bcm_custom_meterid_t *meter_id);

/* Destroy a meter previously created by custom_meter_create() */
extern int bcm_custom_meter_destroy(
    int unit, 
    bcm_custom_meterid_t meter_id);

/* Meter Performance monitoring enable */
extern int bcm_custom_meter_pm_enable(
    int unit, 
    bcm_custom_meterid_t meter_id);

/* Meter Performance monitoring disable */
extern int bcm_custom_meter_pm_disable(
    int unit, 
    bcm_custom_meterid_t meter_id);

/* This routine gets the Meter Performance monitoring counters */
extern int bcm_custom_meter_pm_get(
    int unit, 
    bcm_custom_meterid_t meter_id, 
    bcm_custom_meter_pm_params_t *pm_params);

/* This routine Initializes the meter module */
extern int bcm_custom_meter_init(
    int unit);

/* This routine Initializes meter profile params structure */
extern int bcm_custom_meter_profile_params_t_init(
    int unit, 
    bcm_custom_meter_profile_params_t *params);

/* This routine Initializes meter params structure */
extern int bcm_custom_meter_params_t_init(
    int unit, 
    bcm_custom_meter_params_t *params);

/* This routine Initializes performance monitor params structure */
extern int bcm_custom_meter_pm_params_t_init(
    int unit, 
    bcm_custom_meter_pm_params_t *params);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Invalid CosQ. */
#define BCM_CUSTOM_COSQ_INVALID (0xffffffff) 

/* Maximum CosQ entries. */
#define BCM_CUSTOM_COSQ_MAX     (256)      

/* Number of queues per port */
#define BCM_CUSTOM_COS_COUNT    (8)        

/* Shaper flag - AVB mode */
#define BCM_CUSTOM_COSQ_SHAPER_MODE_AVB (0x00000001) 

/* Shaper flag - Packet mode */
#define BCM_CUSTOM_COSQ_SHAPER_MODE_PACKETS (0x00000002) 

/* TSN Configuration flags */
#define BCM_CUSTOM_COSQ_TSN_QUEUE_CONFIG_ENABLE (0x00000001) /* enable/disable */
#define BCM_CUSTOM_COSQ_TSN_CT_CONFIG_ONE_SHOT (0x00000002) /* single/periodic cycle
                                                          start */
#define BCM_CUSTOM_COSQ_TSN_CONFIG_CHANGE   (0x00000004) /* Config change */

/* Drop Precedence enumerations */
typedef enum bcm_custom_dp_e {
    bcmCustomDpGreen = 0,   /* Indicates a packet with low drop precedence. */
    bcmCustomDpYellow = 1,  /* Indicates a packet of medium drop precedence. */
    bcmCustomDpRed = 2,     /* The highest drop precedence. */
    bcmCustomDpDrop = 3     /* Used as a drop indicator. */
} bcm_custom_dp_t;

/* Scheduling mode enumerations */
typedef enum bcm_custom_schedule_mode_e {
    bcmCustomScheduleStrict = 0,    /* Highest priority packets egress first. In
                                       this mode weight is ignored. */
    bcmCustomScheduleRR = 1,        /* Simple round robin algorithm. In this
                                       mode weight is ignored. */
    bcmCustomScheduleWRR = 2,       /* Weighted round robin algorithm. */
    bcmCustomScheduleWDRR = 3       /* Deficit round robin algorithm */
} bcm_custom_schedule_mode_t;

/* Flowcontrol mode enumerations */
typedef enum bcm_custom_flowcontrol_e {
    bcmCustomFlowcontrolNone = 0,   /* Global Flowcontrol disabled */
    bcmCustomFlowcontrolPause = 1,  /* Per port flowcontrol - Pause Packets */
    bcmCustomFlowcontrolPFC = 2,    /* Priority flowcontrol (PFC) mode */
    bcmCustomFlowcontrolMeter = 3   /* Shaping per port - Pause Packets */
} bcm_custom_flowcontrol_t;

/* TSN state enumerations */
typedef enum bcm_custom_tsn_state_e {
    bcmCustomTsnStateGb = 1,    /* Guard band state */
    bcmCustomTsnStateHp = 2,    /* High Priority state */
    bcmCustomTsnStateLp = 3     /* Low priority state */
} bcm_custom_tsn_state_t;

typedef struct bcm_custom_cosq_params_s {
    int en_tc;  /* enable TC from packet */
} bcm_custom_cosq_params_t;

typedef struct bcm_custom_tc_s {
    int int_pri;            /* Internal Priority */
    bcm_custom_dp_t int_dp; /* Internal Drop Precedence */
} bcm_custom_tc_t;

typedef struct bcm_custom_dscp_s {
    int dscp_cp;    /* DSCP Code Point */
    int is_ipv6;    /* IPv4=0, IPv6=1 */
} bcm_custom_dscp_t;

typedef struct bcm_custom_flowcontrol_params_s {
    int enable;     /* Flowcontrol enable */
    int thresh3;    /* The threshold at which all packets from the associated
                       ingress are dropped. Flow control remains asserted. */
    int thresh2;    /* The threshold at which packets with yellow drop
                       precedence are dropped. Flow control remains asserted. */
    int thresh1;    /* The threshold at which packets with red drop precedence
                       are dropped. Flow control remains asserted. */
    int thresh0;    /* The threshold at which flow control is asserted. */
    int hysteresis; /* The point to which a flow controlled ingress' buffer
                       occupancy must fall to before flow control goes from
                       asserted to negated. */
} bcm_custom_flowcontrol_params_t;

typedef struct bcm_custom_cosq_shaper_params_s {
    uint32 flags;           /* Flags:  CUSTOM_COSQ_SHAPER_XX */
    uint32 bits_sec;        /* Committed rate in kbps or packets per second. */
    uint32 max_bits_sec;    /* Maximum rate - Currently unused */
    uint32 bits_burst;      /* Committed burst size in kbits or number of
                               packets. */
    uint32 kbits_current;   /* Current size - Currently unused */
} bcm_custom_cosq_shaper_params_t;

/* TSN configuration parameters */
typedef struct bcm_custom_cosq_tsn_params_s {
    int cfg_id;         /* Configuration id 0/1 */
    int flags;          /* Flags - CBX_COSQ_TSN_XX */
    int sync_source;    /* sync source can be SYNC_A or SYNC_B */
    int tick_period;    /* Tick period value. One tick value is 8ns */
    int start_state;    /* start state  Guard, HiPrio, LowPrio */
    int start_duration; /* start stateduration in tick period */
    int gb_duration;    /* Guard band duration in tick period */
    int hp_duration;    /* High priority duration in tick period */
    int lp_duration;    /* Low priority duration in tick period */
} bcm_custom_cosq_tsn_params_t;

#ifndef BCM_HIDE_DISPATCHABLE

/* This routine Initializes the CosQ module */
extern int bcm_custom_cosq_init(
    int unit);

/* Initialize COSQ flowcontrol object */
extern int bcm_custom_flowcontrol_params_t_init(
    int unit, 
    bcm_gport_t portid, 
    bcm_custom_flowcontrol_params_t *flowcontrol_params);

/* Initialize COSQ shaper object */
extern int bcm_custom_cosq_shaper_params_t_init(
    int unit, 
    bcm_gport_t portid, 
    bcm_custom_cosq_shaper_params_t *shaper_params);

/* Initialize COSQ TSN object */
extern int bcm_custom_cosq_tsn_params_t_init(
    int unit, 
    bcm_custom_cosq_tsn_params_t *tsn_params);

/* 
 * This routine is used to set the default ingress traffic class on a
 * port
 */
extern int bcm_custom_cosq_port_default_tc_set(
    int unit, 
    bcm_gport_t portid, 
    bcm_custom_tc_t tc);

/* 
 * This routine is used to get the default ingress traffic class on a
 * port
 */
extern int bcm_custom_cosq_port_default_tc_get(
    int unit, 
    bcm_gport_t portid, 
    bcm_custom_tc_t *tc);

/* This routine is used to set the default egress {pcp,dei} for port. */
extern int bcm_custom_cosq_port_default_pcp_set(
    int unit, 
    bcm_gport_t portid, 
    int pcp, 
    int dei);

/* This routine is used to get the default egress {pcp,dei} for port. */
extern int bcm_custom_cosq_port_default_pcp_get(
    int unit, 
    bcm_gport_t portid, 
    int *pcp, 
    int *dei);

/* 
 * This routine is used to set the ingress mapping of {pcp,dei} to
 * traffic class
 */
extern int bcm_custom_cosq_port_pcp2tc_set(
    int unit, 
    bcm_gport_t portid, 
    int pcp, 
    int dei, 
    bcm_custom_tc_t tc);

/* 
 * This routine is used to get the ingress mapping of {pcp,dei} to
 * traffic class
 */
extern int bcm_custom_cosq_port_pcp2tc_get(
    int unit, 
    bcm_gport_t portid, 
    int pcp, 
    int dei, 
    bcm_custom_tc_t *tc);

/* 
 * This routine is used to set the egress mapping of traffic class to
 * {pcpi,dei}
 */
extern int bcm_custom_cosq_port_tc2pcp_set(
    int unit, 
    bcm_gport_t portid, 
    bcm_custom_tc_t tc, 
    int pcp, 
    int dei);

/* 
 * This routine is used to get the egress mapping of traffic class to
 * {pcpi,dei}
 */
extern int bcm_custom_cosq_port_tc2pcp_get(
    int unit, 
    bcm_gport_t portid, 
    bcm_custom_tc_t tc, 
    int *pcp, 
    int *dei);

/* 
 * This routine is used to set the ingress mapping of dscp to traffic
 * class
 */
extern int bcm_custom_cosq_dscp2tc_set(
    int unit, 
    bcm_custom_dscp_t dscp, 
    bcm_custom_tc_t tc);

/* 
 * This routine is used to get the ingress mapping of dscp to traffic
 * class
 */
extern int bcm_custom_cosq_dscp2tc_get(
    int unit, 
    bcm_custom_dscp_t dscp, 
    bcm_custom_tc_t *tc);

/* 
 * This routine is used to set the egress mapping of traffic class to
 * dscp
 */
extern int bcm_custom_cosq_tc2dscp_set(
    int unit, 
    bcm_custom_tc_t tc, 
    bcm_custom_dscp_t dscp);

/* 
 * This routine is used to get the egress mapping of traffic class to
 * dscp
 */
extern int bcm_custom_cosq_tc2dscp_get(
    int unit, 
    bcm_custom_tc_t tc, 
    bcm_custom_dscp_t *dscp);

/* This routine is used to get the COSQ scheduling of a port */
extern int bcm_custom_cosq_port_sched_get(
    int unit, 
    bcm_gport_t portid, 
    bcm_custom_schedule_mode_t *sched_mode, 
    int *weights);

/* 
 * This routine is used to set the COSQ scheduling of a port. The weight
 * specified is per queue(total 8)
 */
extern int bcm_custom_cosq_port_sched_set(
    int unit, 
    bcm_gport_t portid, 
    bcm_custom_schedule_mode_t sched_mode, 
    int *weights);

/* This routine is used to get the global flowcontrol configuration */
extern int bcm_custom_cosq_flowcontrol_get(
    int unit, 
    bcm_custom_flowcontrol_t *flowcontrol_mode);

/* This routine is used to set the global flowcontrol configuration */
extern int bcm_custom_cosq_flowcontrol_set(
    int unit, 
    bcm_custom_flowcontrol_t flowcontrol_mode);

/* This routine is used to get the port flowcontrol configuration */
extern int bcm_custom_cosq_port_flowcontrol_get(
    int unit, 
    bcm_gport_t portid, 
    bcm_custom_flowcontrol_params_t *fc_params);

/* This routine is used to set the port flowcontrol configuration */
extern int bcm_custom_cosq_port_flowcontrol_set(
    int unit, 
    bcm_gport_t portid, 
    bcm_custom_flowcontrol_params_t fc_params);

/* This routine is used to get the PFC flowcontrol configuration */
extern int bcm_custom_cosq_pfc_flowcontrol_get(
    int unit, 
    int int_pri, 
    bcm_custom_flowcontrol_params_t *fc_params);

/* This routine is used to set the PFC flowcontrol configuration */
extern int bcm_custom_cosq_pfc_flowcontrol_set(
    int unit, 
    int int_pri, 
    bcm_custom_flowcontrol_params_t fc_params);

/* This routine is used to get an egress shaper on a port. */
extern int bcm_custom_cosq_port_shaper_get(
    int unit, 
    bcm_gport_t portid, 
    bcm_custom_cosq_shaper_params_t *shaper_params);

/* This routine is used to set an egress shaper on a port. */
extern int bcm_custom_cosq_port_shaper_set(
    int unit, 
    bcm_gport_t portid, 
    bcm_custom_cosq_shaper_params_t *shaper_params);

/* This routine is used to get an egress shaper on a qos queue. */
extern int bcm_custom_cosq_queue_shaper_get(
    int unit, 
    bcm_gport_t portid, 
    int int_pri, 
    bcm_custom_cosq_shaper_params_t *shaper_params);

/* This routine is used to set an egress shaper on a qos queue. */
extern int bcm_custom_cosq_queue_shaper_set(
    int unit, 
    bcm_gport_t portid, 
    int int_pri, 
    bcm_custom_cosq_shaper_params_t *shaper_params);

/* This routine is used to get TSN parameters on a qos queue. */
extern int bcm_custom_cosq_queue_tsn_get(
    int unit, 
    bcm_gport_t portid, 
    int int_pri, 
    bcm_custom_cosq_tsn_params_t *tsn_params);

/* This routine is used to set an TSN parameters on a qos queue. */
extern int bcm_custom_cosq_queue_tsn_set(
    int unit, 
    bcm_gport_t portid, 
    int int_pri, 
    bcm_custom_cosq_tsn_params_t *tsn_params);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Authentication Port flags - UnAuthenticated Port */
#define BCM_CUSTOM_AUTH_PORT_UNAUTH (0x00000001) 

/* Authentication Port flags - Allow outgoing packets */
#define BCM_CUSTOM_AUTH_PORT_BLOCK_IN   (0x00000002) 

/* Authentication Port flags - Do not allow in or out packets */
#define BCM_CUSTOM_AUTH_PORT_BLOCK_INOUT    (0x00000004) 

/* Authentication Port flags - Authenticated  Port */
#define BCM_CUSTOM_AUTH_PORT_AUTH   (0x00000008) 

/* Authentication Port flags - Drop unknown SA packets */
#define BCM_CUSTOM_AUTH_PORT_UNKNOWN_DROP   (0x00000010) 

/* Authentication Port flags - Trap unknown SA packets */
#define BCM_CUSTOM_AUTH_PORT_UNKNOWN_TRAP   (0x00000020) 

/* Authentication Port flags - Link change deauthenticates */
#define BCM_CUSTOM_AUTH_PORT_LINK   (0x00000040) 

/* Authentication mode */
typedef enum bcm_custom_auth_mode_e {
    bcmCustomAuthModeUncontrolled = 0,  /* Port Security is disabled. */
    bcmCustomAuthModeUnauth = 1,        /* Port Security default is
                                           UnAuthenticated. */
    bcmCustomAuthModeAuth = 2           /* Port Security default is
                                           Authenticated. */
} bcm_custom_auth_mode_t;

typedef struct bcm_custom_auth_params_s {
    uint32 flags;                       /* Flags: CUSTOM_AUTH_XX */
    bcm_custom_auth_mode_t auth_mode;   /* Authentication mode */
    bcm_mac_t uc_mac;                   /* Auth unicast MAC address */
    bcm_mac_t mc_mac;                   /* Auth multicast MAC address */
} bcm_custom_auth_params_t;

typedef struct bcm_custom_auth_port_mode_s {
    uint32 flags;   /* Flags:  CBX_AUTH_PORT_XX */
} bcm_custom_auth_port_mode_t;

#ifndef BCM_HIDE_DISPATCHABLE

/* Initializes global authentication parameters. */
extern int bcm_custom_auth_params_t_init(
    int unit, 
    bcm_custom_auth_params_t *auth_params);

/* Initializes authentication port parameters. */
extern int bcm_custom_auth_port_mode_t_init(
    int unit, 
    bcm_custom_auth_port_mode_t *auth_port_mode);

/* This routine Initializes the Auth module */
extern int bcm_custom_auth_init(
    int unit, 
    bcm_custom_auth_params_t *auth_params);

/* This routine destroys previously initialized Auth module */
extern int bcm_custom_auth_detach(
    int unit, 
    bcm_custom_auth_params_t *auth_params);

/* This routine is used to get Authentication configuration information. */
extern int bcm_custom_auth_mode_get(
    int unit, 
    bcm_custom_auth_params_t *auth_params);

/* This routine is used to set Authentication configuration information. */
extern int bcm_custom_auth_mode_set(
    int unit, 
    bcm_custom_auth_params_t *auth_params);

/* This routine is used to get Authentication mode of a port. */
extern int bcm_custom_auth_port_get(
    int unit, 
    bcm_gport_t portid, 
    bcm_custom_auth_port_mode_t *port_mode);

/* This routine is used to set Authentication mode of a port. */
extern int bcm_custom_auth_port_set(
    int unit, 
    bcm_gport_t portid, 
    bcm_custom_auth_port_mode_t *port_mode);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Time Sync Interval Generator Identifiers */
#define BCM_CUSTOM_TS_GEN_ID_TAS_1588_SYNC_A (0x0)      /* SyncA */
#define BCM_CUSTOM_TS_GEN_ID_TAS_1588_SYNC_B (0x1)      /* SyncB */
#define BCM_CUSTOM_TS_GEN_ID_2              (0x2)      /* Id-2 */
#define BCM_CUSTOM_TS_GEN_ID_TAS_1588_CLK   (0x3)      /* 1588 clock */
#define BCM_CUSTOM_TS_GEN_ID_TS_SYNC_O      (0x4)      /* SyncO */
#define BCM_CUSTOM_TS_GEN_ID_TS_FRAME_SYNC_O (0x5)      /* Frame SyncO */

/* Time sync Generator configuration flags */
#define BCM_CUSTOM_TS_GEN_CONFIG_F_ENABLE   (0x0001)   /* Enables Interval
                                                          Generator */
#define BCM_CUSTOM_TS_GEN_CONFIG_F_START_TIME (0x0002)   /* Uses start time for
                                                          interval generation */
#define BCM_CUSTOM_TS_GEN_CONFIG_F_ONE_SHOT (0x0004)   /* Interval Generates
                                                          only one time */

/* Time sync Event Identifiers */
#define BCM_CUSTOM_TS_EVENT_ID_CPU          (0)        /* CPU */
#define BCM_CUSTOM_TS_EVENT_ID_GPIO0        (1)        /* GPIO0 */
#define BCM_CUSTOM_TS_EVENT_ID_GPIO1        (2)        /* GPIO1 */
#define BCM_CUSTOM_TS_EVENT_ID_GPIO2        (3)        /* GPIO2 */
#define BCM_CUSTOM_TS_EVENT_ID_GPIO3        (4)        /* GPIO3 */
#define BCM_CUSTOM_TS_EVENT_ID_GPIO4        (5)        /* GPIO4 */
#define BCM_CUSTOM_TS_EVENT_ID_GPIO5        (6)        /* GPIO5 */
#define BCM_CUSTOM_TS_EVENT_ID_GPIO6        (7)        /* GPIO6 */
#define BCM_CUSTOM_TS_EVENT_ID_GPIO7        (8)        /* GPIO7 */
#define BCM_CUSTOM_TS_EVENT_ID_SYNCE_CLK0   (9)        /* SyncE clock 0 */
#define BCM_CUSTOM_TS_EVENT_ID_SYNCE_CLK1   (10)       /* SyncE clock 1 */
#define BCM_CUSTOM_TS_EVENT_ID_SYNCE_CLK2   (11)       /* SyncE clock 2 */
#define BCM_CUSTOM_TS_EVENT_ID_SYNCE_CLK3   (12)       /* SyncE clock 3 */
#define BCM_CUSTOM_TS_EVENT_ID_SYNCE_CLK4   (13)       /* SyncE clock 4 */
#define BCM_CUSTOM_TS_EVENT_ID_SYNCE_CLK5   (14)       /* SyncE clock 5 */
#define BCM_CUSTOM_TS_EVENT_ID_SYNC_IN0     (15)       /* Sync In 0 */
#define BCM_CUSTOM_TS_EVENT_ID_SYNC_IN1     (16)       /* Sync In 1 */
#define BCM_CUSTOM_TS_EVENT_ID_SYNC_IN2     (17)       /* Sync In 2 */
#define BCM_CUSTOM_TS_EVENT_ID_SYNC_IN3     (18)       /* Sync In 3 */

/* Time sync Event source Identifiers */
#define BCM_CUSTOM_TS_EVENT_SOURCE_GPHY0_CLK0 (0)        /* Gphy0 clock 0 */
#define BCM_CUSTOM_TS_EVENT_SOURCE_GPHY0_CLK1 (1)        /* Gphy0 clock 1 */
#define BCM_CUSTOM_TS_EVENT_SOURCE_GPHY0_CLK2 (2)        /* Gphy0 clock 2 */
#define BCM_CUSTOM_TS_EVENT_SOURCE_GPHY0_CLK3 (3)        /* Gphy0 clock 3 */
#define BCM_CUSTOM_TS_EVENT_SOURCE_GPHY1_CLK0 (4)        /* Gphy1 clock 0 */
#define BCM_CUSTOM_TS_EVENT_SOURCE_GPHY1_CLK1 (5)        /* Gphy1 clock 1 */
#define BCM_CUSTOM_TS_EVENT_SOURCE_GPHY1_CLK2 (6)        /* Gphy1 clock 2 */
#define BCM_CUSTOM_TS_EVENT_SOURCE_GPHY1_CLK3 (7)        /* Gphy1 clock 3 */
#define BCM_CUSTOM_TS_EVENT_SOURCE_XFI0_CLK (8)        /* XFI0 clock */
#define BCM_CUSTOM_TS_EVENT_SOURCE_XFI1_CLK (9)        /* XFI1 clock */
#define BCM_CUSTOM_TS_EVENT_SOURCE_RECOV_CLK0 (10)       /* Recover clock0 */
#define BCM_CUSTOM_TS_EVENT_SOURCE_RECOV_CLK1 (11)       /* Recover clock1 */
#define BCM_CUSTOM_TS_EVENT_SOURCE_RECOV_CLK2 (12)       /* Recover clock2 */
#define BCM_CUSTOM_TS_EVENT_SOURCE_TS_TIMER0 (13)       /* TS timer0 */
#define BCM_CUSTOM_TS_EVENT_SOURCE_TS_TIMER1 (14)       /* TS timer1 */
#define BCM_CUSTOM_TS_EVENT_SOURCE_LCPLL    (15)       /* LCPLL */
#define BCM_CUSTOM_TS_EVENT_SOURCE_SYNC_IN  (16)       /* Sync In */
#define BCM_CUSTOM_TS_EVENT_SOURCE_SYNC_OUT (17)       /* Sync Out */
#define BCM_CUSTOM_TS_EVENT_SOURCE_FRAME_SYNC_IN (18)       /* Frame Sync In */
#define BCM_CUSTOM_TS_EVENT_SOURCE_FRAME_SYNC_OUT (19)       /* Frame Sync Out */

/* Time */
typedef struct bcm_custom_ts_time_s {
    uint64 sec;     /* Number of seconds */
    uint32 nsec;    /* Number of nano seconds */
} bcm_custom_ts_time_t;

/* Time Event inforamtion */
typedef struct bcm_custom_ts_event_s {
    uint32 flags;               /* Flags: Events flags */
    uint32 event_id;            /* Event Identifier */
    bcm_custom_ts_time_t tod;   /* Time of Day */
} bcm_custom_ts_event_t;

/* bcm_custom_ts_event_cb_t */
typedef void (*bcm_custom_ts_event_cb_t)(
    int unit, 
    int event_id, 
    bcm_custom_ts_event_t *ts_event);

/* Time event configuration parameters */
typedef struct bcm_custom_ts_event_config_s {
    uint32 flags;                       /* Flags: Event flags */
    uint32 divider;                     /* Frequency divider value */
    bcm_custom_ts_event_cb_t event_cb_func; /* TS event callback function */
} bcm_custom_ts_event_config_t;

/* Interval generator configuration parameters */
typedef struct bcm_custom_ts_gen_config_s {
    uint32 flags;                       /* Flags: CUSTOM_TS_GEN_XX */
    bcm_custom_ts_time_t start_time;    /* Start time at which event is
                                           generated */
    uint32 high_time_nsec;              /* Pulse high time in nano seconds */
    uint32 low_time_nsec;               /* Pulse low time in nano seconds */
} bcm_custom_ts_gen_config_t;

#ifndef BCM_HIDE_DISPATCHABLE

/* This routine Initializes the Time Sync module */
extern int bcm_custom_ts_init(
    int unit);

/* This routine is used to configure Time sync generator configuration. */
extern int bcm_custom_ts_gen_config_set(
    int unit, 
    int generator_id, 
    bcm_custom_ts_gen_config_t *config);

/* This routine is used to configure exeternal Time Sync events. */
extern int bcm_custom_ts_event_config_set(
    int unit, 
    int event_id, 
    int event_source, 
    bcm_custom_ts_event_config_t *config);

/* This routine is used to get current TOD and time stamp. */
extern int bcm_custom_ts_tod_get(
    int unit, 
    bcm_custom_ts_time_t *time, 
    uint64 *timestamp);

/* This routine is used to set current TOD and time stamp. */
extern int bcm_custom_ts_tod_set(
    int unit, 
    bcm_custom_ts_time_t time, 
    uint64 timestamp);

#if defined(INCLUDE_PTP)
/* This routine shows the 802.1as BMCA information */
extern int bcm_custom_dot1as_debug_bmca_show(
    int unit);
#endif

#if defined(INCLUDE_PTP)
/* This routine shows the 802.1as peer delay information */
extern int bcm_custom_dot1as_debug_pdelay_show(
    int unit, 
    uint32 intf, 
    uint8 showlog);
#endif

#if defined(INCLUDE_PTP)
/* This routine shows the 802.1as timesync information */
extern int bcm_custom_dot1as_debug_timesync_show(
    int unit, 
    uint8 verbose, 
    uint32 num);
#endif

#if defined(INCLUDE_PTP)
/* This routine shows the 802.1as interface statistics */
extern int bcm_custom_dot1as_debug_intf_stats_show(
    int unit, 
    uint32 intf);
#endif

#if defined(INCLUDE_PTP)
/* This routine resets the 802.1as interface statistics */
extern int bcm_custom_dot1as_debug_intf_stats_reset(
    int unit, 
    uint32 intf);
#endif

#if defined(INCLUDE_PTP)
/* This routine shows the 802.1as interface status */
extern int bcm_custom_dot1as_debug_intf_status_show(
    int unit, 
    uint32 intf);
#endif

#if defined(INCLUDE_PTP)
/* This routine shows the 802.1as timer intervals information */
extern int bcm_custom_dot1as_debug_intl_show(
    int unit);
#endif

#if defined(INCLUDE_PTP)
/* This routine sets the 802.1as debug flags */
extern int bcm_custom_dot1as_debug_flags_set(
    int unit, 
    uint32 flags);
#endif

#endif /* BCM_HIDE_DISPATCHABLE */

#endif /* __BCM_CUSTOM_H__ */
